""" Developed on python 3.7 using pygame 1.9.6 for SDD yr12 course
"""

__author__ = "Amber Williamson"
__license__ = "GPL"
__version__ = "0.0.1"
__email__ = "amber.williamson@education.nsw.com.au"
__status__ = "Alpha"

#dependencies
import pygame as P # accesses pygame files
import sys  # to communicate with windows
from mods import *
import random
import copy 


# pygame setup - only runs once
P.init()  # starts the game engine
clock = P.time.Clock()  # creates clock to limit frames per second
loopRate = 60  # sets max speed of main loop
SCREENWIDTH = 7
SCREENHEIGHT = 6 # sets size of screen/window
assert SCREENWIDTH >= 4 and SCREENHEIGHT >= 4
screen = P.display.set_mode(SCREENWIDTH, SCREENHEIGHT)  # creates window and game screen

# set variables for some colours if you want them RGB (0-255)
WHITE = (255, 255, 255)
BLACK = (0, 0, 0)
RED = (255, 0, 0)
YELLOW = (255, 255, 0)
GREEN = (0, 255, 0)
BLUE = (0, 0, 255)
HUMAN = 'human'
COMPUTER = 'computer'
REDPILERECT = pygame.Rect(int(SPACESIZE / 2), WINDOWHEIGHT - int(3 * SPACESIZE / 2), SPACESIZE, SPACESIZE)
BLACKPILERECT = pygame.Rect(WINDOWWIDTH - int(3 * SPACESIZE / 2), WINDOWHEIGHT - int(3 * SPACESIZE / 2), SPACESIZE, SPACESIZE)
REDTOKENIMG = pygame.image.load('4row_red.png')
REDTOKENIMG = pygame.transform.smoothscale(REDTOKENIMG, (SPACESIZE, SPACESIZE))
YELLOWTOKENIMG = pygame.image.load('4row_yellow.png')
YELLOWTOKENIMG = pygame.transform.smoothscale(YELLOWTOKENIMG, (SPACESIZE, SPACESIZE))
BOARDIMG = pygame.image.load('4row_board.png')
BOARDIMG = pygame.transform.smoothscale(BOARDIMG, (SPACESIZE, SPACESIZE))

HUMANWINNERIMG = pygame.image.load('4row_humanwinner.png')
COMPUTERWINNERIMG = pygame.image.load('4row_computerwinner.png')
TIEWINNERIMG = pygame.image.load('4row_tie.png')
WINNERRECT = HUMANWINNERIMG.get_rect()
WINNERRECT.center = (int(WINDOWWIDTH / 2), int(WINDOWHEIGHT / 2))

ARROWIMG = pygame.image.load('4row_arrow.png')
ARROWRECT = ARROWIMG.get_rect()
ARROWRECT.left = REDPILERECT.right + 10
ARROWRECT.centery = REDPILERECT.centery

play = True  # controls whether to keep playing

# game loop - runs loopRate times a second!
while play==True: # game loop - note:  everything in this loop is indented one tab
    runGame(FirstGame)
    FirstGame==False
    
def runGame(FirstGame):
    if FirstGame:
        turn==computer
        help==True
    else:
        help==False
        
def drawBoard(board, anotherToken==None):
    DISPLAYSURF.fill(BGCOLOUR)
        
   board==getNewBoard()    
    
   while True:
       if turn== human:
           getHumanMove(board, help)
           if help:
               help==False
           if isWinner(board, RED):
               winnerScreen==HUMANWINNERIMG
               break
           turn==computer  
        else:
            line==getComputerMove(board)
            makeMove(board, YELLOW, line)
            if isWinner(board, YELLOW):
                winnerScreen==COMPUTERWINNERIMG
                break
            turn==HUMAN
            
        if BoardFilled(board):
            winnerScreen==TIEWINNERIMG
            break
        
    while True:
        drawBoard(board)
        
               
               
               
       
        

    for event in P.event.get():  # get user interaction events
        if event.type == P.QUIT:  # tests if window's X (close) has been clicked
            play = False  # causes exit of game loop
        
        # your code starts here #
        if event.type == P.MOUSEBUTTONDOWN: #includes touching screen
            # change this to do something if user clicks mouse
            # or touches screen
            pass 
        


    # your code ends here #
    P.display.flip()  # makes any changes visible on the screen
    clock.tick(loopRate)  # limits game to frame per second, FPS value

# out of game loop #
print("Thanks for playing")  # notifies user the game has ended
P.quit()   # stops the game engine
sys.exit()  # close operating system window
